// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: loyalty/product.proto

package loyalty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_GetListGiftsProduct_FullMethodName        = "/loyalty.ProductService/GetListGiftsProduct"
	ProductService_GetListGiftsProductStruct_FullMethodName  = "/loyalty.ProductService/GetListGiftsProductStruct"
	ProductService_GetListGiftsProductValue_FullMethodName   = "/loyalty.ProductService/GetListGiftsProductValue"
	ProductService_GetGiftsDetail_FullMethodName             = "/loyalty.ProductService/GetGiftsDetail"
	ProductService_CreateProduct_FullMethodName              = "/loyalty.ProductService/CreateProduct"
	ProductService_StreamClientProduct_FullMethodName        = "/loyalty.ProductService/StreamClientProduct"
	ProductService_StreamServerProduct_FullMethodName        = "/loyalty.ProductService/StreamServerProduct"
	ProductService_BiderectionalStreamProduct_FullMethodName = "/loyalty.ProductService/BiderectionalStreamProduct"
	ProductService_SayHello_FullMethodName                   = "/loyalty.ProductService/SayHello"
	ProductService_SayHellox_FullMethodName                  = "/loyalty.ProductService/SayHellox"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetListGiftsProduct(ctx context.Context, in *GetListGiftsProductRequest, opts ...grpc.CallOption) (*GetListGiftsResponse, error)
	GetListGiftsProductStruct(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsStructResponse, error)
	GetListGiftsProductValue(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsValueResponse, error)
	GetGiftsDetail(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsDetailResponse, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	StreamClientProduct(ctx context.Context, opts ...grpc.CallOption) (ProductService_StreamClientProductClient, error)
	StreamServerProduct(ctx context.Context, in *ProductDetailEntity, opts ...grpc.CallOption) (ProductService_StreamServerProductClient, error)
	BiderectionalStreamProduct(ctx context.Context, opts ...grpc.CallOption) (ProductService_BiderectionalStreamProductClient, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHellox(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetListGiftsProduct(ctx context.Context, in *GetListGiftsProductRequest, opts ...grpc.CallOption) (*GetListGiftsResponse, error) {
	out := new(GetListGiftsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetListGiftsProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetListGiftsProductStruct(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsStructResponse, error) {
	out := new(GetListGiftsStructResponse)
	err := c.cc.Invoke(ctx, ProductService_GetListGiftsProductStruct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetListGiftsProductValue(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsValueResponse, error) {
	out := new(GetListGiftsValueResponse)
	err := c.cc.Invoke(ctx, ProductService_GetListGiftsProductValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetGiftsDetail(ctx context.Context, in *GetGiftsProductDetailRequest, opts ...grpc.CallOption) (*GetListGiftsDetailResponse, error) {
	out := new(GetListGiftsDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_GetGiftsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) StreamClientProduct(ctx context.Context, opts ...grpc.CallOption) (ProductService_StreamClientProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], ProductService_StreamClientProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceStreamClientProductClient{stream}
	return x, nil
}

type ProductService_StreamClientProductClient interface {
	Send(*ProductDetailEntity) error
	CloseAndRecv() (*GetListGiftsDetailResponse, error)
	grpc.ClientStream
}

type productServiceStreamClientProductClient struct {
	grpc.ClientStream
}

func (x *productServiceStreamClientProductClient) Send(m *ProductDetailEntity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceStreamClientProductClient) CloseAndRecv() (*GetListGiftsDetailResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetListGiftsDetailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) StreamServerProduct(ctx context.Context, in *ProductDetailEntity, opts ...grpc.CallOption) (ProductService_StreamServerProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], ProductService_StreamServerProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceStreamServerProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_StreamServerProductClient interface {
	Recv() (*GetListGiftsDetailResponse, error)
	grpc.ClientStream
}

type productServiceStreamServerProductClient struct {
	grpc.ClientStream
}

func (x *productServiceStreamServerProductClient) Recv() (*GetListGiftsDetailResponse, error) {
	m := new(GetListGiftsDetailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) BiderectionalStreamProduct(ctx context.Context, opts ...grpc.CallOption) (ProductService_BiderectionalStreamProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[2], ProductService_BiderectionalStreamProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceBiderectionalStreamProductClient{stream}
	return x, nil
}

type ProductService_BiderectionalStreamProductClient interface {
	Send(*ProductDetailEntity) error
	Recv() (*GetListGiftsDetailResponse, error)
	grpc.ClientStream
}

type productServiceBiderectionalStreamProductClient struct {
	grpc.ClientStream
}

func (x *productServiceBiderectionalStreamProductClient) Send(m *ProductDetailEntity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceBiderectionalStreamProductClient) Recv() (*GetListGiftsDetailResponse, error) {
	m := new(GetListGiftsDetailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, ProductService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SayHellox(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, ProductService_SayHellox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	GetListGiftsProduct(context.Context, *GetListGiftsProductRequest) (*GetListGiftsResponse, error)
	GetListGiftsProductStruct(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsStructResponse, error)
	GetListGiftsProductValue(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsValueResponse, error)
	GetGiftsDetail(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsDetailResponse, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	StreamClientProduct(ProductService_StreamClientProductServer) error
	StreamServerProduct(*ProductDetailEntity, ProductService_StreamServerProductServer) error
	BiderectionalStreamProduct(ProductService_BiderectionalStreamProductServer) error
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHellox(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetListGiftsProduct(context.Context, *GetListGiftsProductRequest) (*GetListGiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListGiftsProduct not implemented")
}
func (UnimplementedProductServiceServer) GetListGiftsProductStruct(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListGiftsProductStruct not implemented")
}
func (UnimplementedProductServiceServer) GetListGiftsProductValue(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListGiftsProductValue not implemented")
}
func (UnimplementedProductServiceServer) GetGiftsDetail(context.Context, *GetGiftsProductDetailRequest) (*GetListGiftsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGiftsDetail not implemented")
}
func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) StreamClientProduct(ProductService_StreamClientProductServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClientProduct not implemented")
}
func (UnimplementedProductServiceServer) StreamServerProduct(*ProductDetailEntity, ProductService_StreamServerProductServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServerProduct not implemented")
}
func (UnimplementedProductServiceServer) BiderectionalStreamProduct(ProductService_BiderectionalStreamProductServer) error {
	return status.Errorf(codes.Unimplemented, "method BiderectionalStreamProduct not implemented")
}
func (UnimplementedProductServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedProductServiceServer) SayHellox(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHellox not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetListGiftsProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListGiftsProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetListGiftsProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetListGiftsProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetListGiftsProduct(ctx, req.(*GetListGiftsProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetListGiftsProductStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftsProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetListGiftsProductStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetListGiftsProductStruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetListGiftsProductStruct(ctx, req.(*GetGiftsProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetListGiftsProductValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftsProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetListGiftsProductValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetListGiftsProductValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetListGiftsProductValue(ctx, req.(*GetGiftsProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetGiftsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftsProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetGiftsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetGiftsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetGiftsDetail(ctx, req.(*GetGiftsProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_StreamClientProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).StreamClientProduct(&productServiceStreamClientProductServer{stream})
}

type ProductService_StreamClientProductServer interface {
	SendAndClose(*GetListGiftsDetailResponse) error
	Recv() (*ProductDetailEntity, error)
	grpc.ServerStream
}

type productServiceStreamClientProductServer struct {
	grpc.ServerStream
}

func (x *productServiceStreamClientProductServer) SendAndClose(m *GetListGiftsDetailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceStreamClientProductServer) Recv() (*ProductDetailEntity, error) {
	m := new(ProductDetailEntity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductService_StreamServerProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductDetailEntity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).StreamServerProduct(m, &productServiceStreamServerProductServer{stream})
}

type ProductService_StreamServerProductServer interface {
	Send(*GetListGiftsDetailResponse) error
	grpc.ServerStream
}

type productServiceStreamServerProductServer struct {
	grpc.ServerStream
}

func (x *productServiceStreamServerProductServer) Send(m *GetListGiftsDetailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_BiderectionalStreamProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).BiderectionalStreamProduct(&productServiceBiderectionalStreamProductServer{stream})
}

type ProductService_BiderectionalStreamProductServer interface {
	Send(*GetListGiftsDetailResponse) error
	Recv() (*ProductDetailEntity, error)
	grpc.ServerStream
}

type productServiceBiderectionalStreamProductServer struct {
	grpc.ServerStream
}

func (x *productServiceBiderectionalStreamProductServer) Send(m *GetListGiftsDetailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceBiderectionalStreamProductServer) Recv() (*ProductDetailEntity, error) {
	m := new(ProductDetailEntity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SayHellox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SayHellox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SayHellox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SayHellox(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loyalty.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListGiftsProduct",
			Handler:    _ProductService_GetListGiftsProduct_Handler,
		},
		{
			MethodName: "GetListGiftsProductStruct",
			Handler:    _ProductService_GetListGiftsProductStruct_Handler,
		},
		{
			MethodName: "GetListGiftsProductValue",
			Handler:    _ProductService_GetListGiftsProductValue_Handler,
		},
		{
			MethodName: "GetGiftsDetail",
			Handler:    _ProductService_GetGiftsDetail_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _ProductService_SayHello_Handler,
		},
		{
			MethodName: "SayHellox",
			Handler:    _ProductService_SayHellox_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamClientProduct",
			Handler:       _ProductService_StreamClientProduct_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamServerProduct",
			Handler:       _ProductService_StreamServerProduct_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiderectionalStreamProduct",
			Handler:       _ProductService_BiderectionalStreamProduct_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "loyalty/product.proto",
}
